CoAn v2.0

[FiniteAutomaton:FA]
finite test automaton halting  on abc, aa and strings like xde. The multiple character edge makes use of character sets. The overlining of X…Z means all characters except X, Y and Z.
EOQ;
-
cf:
vf:

t:abc
t:cde
t:aa


6
1 425 338 s S0
2 600 588 - S1
3 870 390 - S2
4 880 735 - S3
5 1163 518 e S4
6 961 876 - S5

512 463 a
1 2
439 358 475 410 549 515 585 567

735 489 b
2 3
619 573 677 531 792 446 850 404

740 661 b
2 4
621 599 680 630 799 692 858 723

1015 453 c
3 5
892 399 953 426 1076 480 1137 506

1020 627 a
4 5
899 719 959 673 1080 581 1140 534

505 850 
1 6
428 362 449 496 491 765 513 900 618 894 830 882 936 877

920 805 a
6 4
948 854 934 830 906 780 892 756

884 166 !=X…Z∘bcd∘cde
1 5
446 325 507 283 622 202 702 183 788 164 933 156 1010 188 1078 227 1115 416 1151 492


[PDA_Test:PDA]
test PDA with epsilon edges; it will halt on abc.
EOQ;
-
cf:
vf:

t:abc
t:abcd


6
1 200 300 s nᴗ1❫
2 600 300 - nᴗ2❫
3 1000 300 - nᴗ3❫
4 1000 500 - nᴗ4❫
5 600 500 - nᴗ5❫
6 200 500 e nᴗ6❫

400 300 a//xxx
1 2
232 300 316 300 483 300 567 300

800 300 b/x/
2 3
632 300 716 300 883 300 967 300

1000 400 c/xx/
3 4
1000 332 1000 366 1000 433 1000 467

800 400 c/x/
3 5
971 314 885 357 714 442 628 485

800 500 
4 5
967 500 883 500 716 500 632 500

401 500 
5 6
567 500 484 500 318 500 235 500

200 398 abc
1 6
200 332 200 365 200 431 200 464


[ZeroReadEdges:PDA]
Tests zero read edges which consume no input character but push and pop from the stack. This is legal as long as no cycle pushes more or as many character as it pops. The automaton will accept on 6 and 7 while it will reject 5 since only an even number of x is popped below 6.
EOQ;
-
cf:
vf:

t:5
t:6
t:7


3
1 333 620 s s
2 630 627 e f
3 902 521 - 6

472 350 7//xxxxxxx
1 2
344 597 375 534 438 408 470 346 506 410 579 538 616 602

477 464 6//xxxxxx
1 2
349 601 380 566 443 496 475 461 509 497 577 570 611 606

478 569 5//xxxxx
1 2
356 611 385 600 443 578 472 567 505 579 571 604 604 617

724 471 /xxxxxx/
2 3
643 603 663 570 701 504 721 471 760 481 838 503 878 514

767 573 //xxx
3 2
878 529 823 551 711 595 655 616

612 786 /xx
2 2
620 652 607 685 582 751 570 785 592 786 637 788 660 789 653 755 641 687 635 654


[MachineSchema_IndexPrintTest:MS]
test automaton to show index printing: Though it is possible to have nested subindices the situation may become hard to watch especially when a nested subindex appears in the power at the superscript. It is not useful  to run this automaton.
EOQ;
-
cf:
vf:



3
1 200 300 s L:# R^kᴗ12❫-gᴗstartᴗ1❫+1_lᴗ13333❫+mᴗ31❫ R
2 600 300 - R σ 
3 1000 300 e R^4 L^4 L^2:#

440 300 σ!=#
1 2
322 300 381 300 499 300 558 300

784 300 ε
2 3
641 300 712 300 855 300 926 300


[Pushdown Automata]
different pushdown automata
EOQ;

[Pushdown Automata.InfixPDA:PDA]
accepts all correctly bracketed expressions with 'x' and '+'.
EOQ;
-
cf:
vf:

t:{{n+n}+n}


2
1 730 405 s S1
2 966 408 e S2

844 301 n//
1 2
748 388 771 366 819 322 843 300 868 322 919 367 945 389

835 501 +//
2 1
943 424 914 445 855 487 826 508 806 486 766 444 746 423

716 261 {//x
1 1
721 381 711 351 690 291 680 261 700 261 740 261 760 261 753 290 741 350 735 380

986 550 }/x/
2 2
976 433 987 462 1009 520 1021 550 1001 550 962 550 943 550 947 521 956 464 961 435


[Pushdown Automata.TellerPDA:PDA]
check for as  many red+blue tellers as green ones or as many red tellers as blue and green ones.
EOQ;
-
cf:
vf:

t:rrbbgg
t:rrrbbg
t:rbbbgggg


4
1 485 376 s rot
2 705 321 - rot-blau
3 691 483 - rot+blau
4 916 401 e grün

486 248 r//x
1 1
479 351 473 325 461 273 455 248 470 248 502 248 518 248 511 274 497 326 491 352

578 348 b//x
1 2
509 369 544 359 613 337 648 327

571 429 b/x/
1 3
506 387 539 408 603 450 635 471

690 400 b/x/
3 3
674 459 672 444 669 414 668 400 679 400 701 400 713 400 711 414 708 444 706 459

698 225 b//x
2 2
686 297 683 279 676 243 673 225 686 225 712 225 726 225 723 242 719 278 717 296

820 359 g/x/
2 4
758 329 789 344 851 374 881 389

815 442 g/x/
3 4
749 474 782 458 848 427 881 412

914 278 g/x/
4 4
905 374 899 350 886 302 880 278 897 278 933 278 951 278 944 302 932 350 926 374


[Pushdown Automata.Palindrom:PDA]
accept palindroms made of 'x' and 'y' (words that are the same no whether if you read from the beginning to the end or from the end to the beginning).
EOQ;
-
cf:
vf:

t:xyxxyyxxyx


2
1 323 358 s S0
2 548 358 e S1

434 358 
1 2
347 358 390 358 477 358 520 358

317 248 x//x
1 1
314 334 307 312 292 269 285 248 302 248 336 248 353 248 347 269 335 312 329 334

546 240 x/x/
2 2
539 331 532 308 517 262 510 240 528 240 566 240 585 240 577 262 563 308 556 331

555 467 y/y/
2 2
555 384 562 405 574 448 581 470 566 468 537 466 523 465 527 445 537 405 541 385

325 460 y//y
1 1
328 382 333 402 343 444 348 465 334 462 308 458 295 456 300 437 310 400 316 381


[Pushdown Automata.AllPalindroms:PDA]
accept palindroms with any characters.
EOQ;
-
cf:
vf:

t:abcdcba
t:abcddcba


2
1 445 583 s Sᴗ0
2 692 578 e Sᴗ1❫

450 404 α!=//α
1 1
445 550 406 507 366 405 447 406 507 381 508 507 445 550

568 545 
1 2
477 582 552 536 584 532 656 578

684 396 α!=/α
2 2
690 542 657 515 592 401 684 397 758 373 732 508 690 542

571 614 !=
1 2
477 582 537 623 607 627 656 578


[Turing.Brackets.ChkKl:TM]
check whether an expression nests brackets correctly.
EOQ;
-
cf:
vf:

t:#{{}}{}
t:#{}#{}
t:#{{}}#{{}


17
1 241 376 s S
2 511 390 - d
3 741 393 - k
4 905 381 - p
5 1103 388 - q
6 1450 365 - l
7 541 226 - m
8 520 556 - y
9 720 556 - n1
10 833 528 - n2
11 420 793 - y0
12 1018 691 - dr
13 1216 700 - drw
14 670 1098 - dl
15 966 885 - n0
16 1133 888 - S6
17 1341 821 e h

376 383 (#,L)
1 2
265 377 320 380 431 385 486 388

463 292 (x,#)
2 7
500 367 490 347 470 307 461 288 476 276 506 252 521 241

590 311 (#,L)
7 2
555 246 566 260 587 290 598 305 580 321 546 355 528 372

515 473 (#,R)
2 8
512 414 513 443 517 502 518 531

626 391 (},L)
2 3
535 390 580 390 671 392 716 392

615 473 ({,#)
2 9
530 405 572 439 658 506 700 540

717 273 (},L)
3 3
731 370 720 345 700 297 690 273 706 273 739 273 756 273 753 296 747 344 744 368

753 491 ({,[)
3 3
749 416 755 434 769 472 776 491 763 491 738 491 726 491 728 472 734 435 737 417

823 386 ([,L)
3 4
765 391 794 389 851 384 880 382

787 460 (#,R)
3 10
754 413 770 436 803 484 819 507

889 261 ({,L)
4 4
897 357 890 333 875 285 868 261 880 261 905 261 918 261 915 284 910 332 907 356

812 300 (},L)
4 3
886 364 867 348 829 314 810 298 796 316 769 354 755 372

1003 384 (#,R)
4 5
929 381 966 383 1041 385 1078 387

1091 283 (x,R)
5 5
1093 365 1085 344 1068 303 1060 283 1077 283 1112 283 1130 283 1124 303 1114 343 1109 364

1276 376 ([,x)
5 6
1127 386 1202 381 1350 371 1425 366

1435 250 (x,R)
6 6
1441 341 1433 318 1417 272 1410 250 1424 250 1453 250 1468 250 1464 272 1457 317 1453 340

1276 488 (},x)
6 5
1429 379 1389 408 1308 466 1268 495 1231 471 1159 424 1123 401

638 648 (#,L)
5 2
1091 409 1058 469 992 588 960 648 815 648 525 648 380 648 366 629 339 591 326 573 367 531 451 448 493 407

470 674 (#,Y)
8 11
510 578 490 626 449 722 429 770

959 487 (},N)
10 10
854 515 874 502 914 478 935 466 943 473 959 487 968 495 940 501 884 515 857 522

925 609 (N,R)
10 12
851 544 888 576 962 642 999 674

1120 643 ([,#)
12 13
1040 680 1061 670 1104 650 1126 641 1142 652 1175 675 1191 686

1117 750 (#,R)
13 12
1191 712 1175 723 1142 744 1126 755 1104 742 1060 716 1039 703

935 706 (#,L)
12 12
993 687 978 684 949 680 935 678 935 690 935 715 935 728 950 721 980 707 995 701

804 801 (#,L)
9 14
736 574 765 605 822 668 851 700 808 793 722 981 680 1075

720 820 (},#)
14 9
674 1073 689 989 720 820 736 736 732 697 725 619 722 580

818 991 (#,R)
14 15
690 1083 754 1037 881 945 945 899

1049 886 (#,N)
15 16
990 885 1020 885 1078 887 1108 887

1235 854 (N,R)
16 17
1156 880 1196 867 1275 842 1314 829

1130 791 (N,R)
12 17
1025 714 1034 739 1051 790 1060 816 1076 809 1109 797 1126 791 1172 797 1266 810 1313 817

517 821 (x,#)
14 9
652 1080 627 1053 576 1001 551 975 542 937 524 862 515 825 562 762 657 638 704 575

599 815 ({,#)
14 9
661 1074 648 1039 623 969 611 935 607 902 601 837 598 805 625 748 681 634 709 578

1121 538 (x,#)
12 13
1028 668 1044 635 1076 569 1093 536 1108 537 1140 541 1156 543 1168 576 1193 643 1205 676

1134 479 ({,#)
12 13
1022 666 1026 646 1034 605 1038 585 1046 561 1064 513 1073 490 1086 487 1114 481 1128 478 1140 481 1164 487 1176 490 1188 501 1212 523 1225 535 1224 543 1222 561 1221 570 1220 596 1218 648 1217 675

1146 444 ([,#)
12 13
1014 666 1012 648 1008 611 1006 593 1027 553 1071 475 1093 436 1103 436 1125 437 1136 438 1158 451 1203 479 1226 493 1241 514 1272 558 1288 580 1273 604 1245 654 1230 678

622 326 (x,L)
3 3
717 385 689 375 633 357 605 348 615 335 635 310 645 298 664 317 703 356 723 375

974 282 (x,L)
4 4
915 358 927 336 949 290 961 268 969 277 986 295 995 305 977 320 941 350 923 365

1187 320 ({,R)
5 5
1118 368 1132 351 1160 315 1175 298 1182 311 1197 337 1205 350 1185 357 1145 372 1126 379

1002 325 (},R)
5 5
1080 378 1056 369 1008 350 985 341 996 330 1019 310 1031 300 1045 317 1073 351 1087 368

881 428 (x,N)
10 10
836 503 839 485 845 448 848 430 859 429 883 428 895 428 882 447 858 487 846 506

879 806 (Y,R)
11 17
444 793 661 800 1096 813 1313 820


[Turing.Brackets.DblKl:MS]
check whether both of two bracket expressions  are nested correctly.
EOQ;
-
cf:
vf:

t:#{{}}{}
t:#{}#{}
t:#{{}}#{{}


7
1 446 546 s 
2 650 546 - ChkKl   
3 966 545 - L:#  ChkKl  L   
4 820 781 e #  L:Y,N  N  R   
5 1266 641 - R:Y,N   
6 1258 855 e #  L:Y,N  R   
7 723 666 - R:Y,N   

535 546 ε
1 2
467 546 501 546 569 546 603 546

788 545 ε
2 3
697 545 742 545 834 545 880 545

1136 599 Y
3 5
1048 571 1091 585 1180 613 1225 628

1064 704 N
5 4
1225 653 1144 678 984 729 903 754

1262 748 Y
5 6
1265 667 1263 707 1260 788 1258 828

838 608 N
3 7
913 571 875 589 800 626 763 645

771 723 ε
7 4
745 692 758 707 784 739 797 754


[Turing.StdMachines.MyCopy:MS]
EOQ;
-
cf:
vf:

t:#{{}}{}
t:#{}#{}
t:#{{}}#{{}
t:##Axolottl


7
1 385 418 s L:#   
2 615 420 - R   
3 923 421 - #  R:#  R:#   
4 1156 416 - υ   
5 1346 416 - L:#  L:#   
6 1593 421 - υ   
7 615 596 e R:#   

501 419 ε
1 2
412 418 457 418 546 419 591 419

615 505 #
2 7
615 441 615 473 615 537 615 569

1237 416 ε
4 5
1178 416 1208 416 1267 416 1296 416

1108 291 ε
6 2
1593 400 1593 372 1593 316 1593 288 1348 289 859 293 615 295 615 317 615 361 615 383 615 387 615 395 615 399

745 420 υ≠#
2 3
639 420 692 420 799 420 853 420

1063 417 ε
3 4
993 419 1028 418 1098 417 1133 416

1483 418 ε
5 6
1395 417 1439 417 1526 419 1570 420


[Turing.StdMachines.MS_k_Copy_Machine:MS]
k - copy machine:
when the read/write head is positioned at the end of the tape then append a copy of the k-th word counted from the end of the tape to the tape.

EOQ;
-
cf:αᴗ11❫βγ
vf:klᴗ12❫m

t:#Höhle#Axolottl
c:abc
v:2 12 13
t:#einfach
v:1


4
1 200 300 s L^k:#
2 400 300 - R
3 700 300 - # R^k+1:# σ L^k+1:# σ
4 400 500 e R^k:#

303 300 ε
1 2
230 300 267 300 339 300 376 300

499 300 σ!=#
2 3
424 300 461 300 537 300 575 300

913 150 ε
3 2
825 300 893 300 1031 300 1100 300 1100 262 1100 187 1100 150 925 150 575 150 400 150 400 182 400 246 400 279

400 395 #
2 4
400 321 400 358 400 432 400 469


[Turing.StdMachines.MyCopyII:MS]
EOQ;
-
cf:
vf:

t:#{{}}{}
t:#{}#{}
t:#{{}}#{{}
t:##Axolottl


10
1 385 418 s L:#   
2 615 420 - R   
3 781 421 - #   
4 923 421 - R:#   
5 1098 425 - R:#   
6 1230 421 - υ   
7 1341 421 - L:#   
8 1461 421 - L:#   
9 1593 421 - υ   
10 615 596 e R:#   

501 419 ε
1 2
412 418 457 418 546 419 591 419

615 505 #
2 10
615 441 615 473 615 537 615 569

699 420 υ≠#
2 3
639 420 669 420 729 420 759 420

847 421 ε
3 4
803 421 825 421 870 421 893 421

1010 423 ε
4 5
952 421 981 422 1039 423 1068 424

1167 422 ε
5 6
1127 424 1147 423 1187 422 1207 421

1283 421 ε
6 7
1252 421 1267 421 1298 421 1313 421

1401 421 ε
7 8
1368 421 1384 421 1417 421 1433 421

1529 421 ε
8 9
1488 421 1509 421 1550 421 1570 421

1108 291 ε
9 2
1593 400 1593 372 1593 316 1593 288 1348 289 859 293 615 295 615 317 615 361 615 383 615 387 615 395 615 399


[Turing.StdMachines.ShiftLeft:MS]
shift to the left deleting one space character '#' at the left of the current word.
EOQ;
-
cf:
vf:

t:##Axolottl


7
1 216 323 s L:#   
2 428 326 - R   
3 605 328 - L   
4 781 328 - υ   
5 955 331 - R   
6 430 551 - L   
7 433 640 e #   

323 324 ε
1 2
243 323 283 323 363 325 404 325

506 326 υ≠#
2 3
452 326 484 326 520 327 583 327

692 328 ε
3 4
627 328 659 328 725 328 758 328

867 329 ε
4 5
803 328 835 328 899 330 931 330

701 212 ε
5 2
956 310 957 284 959 233 961 208 827 210 559 215 426 218 426 239 427 253 427 305

428 427 #
2 6
428 347 428 392 429 454 429 530

431 590 ε
6 7
430 572 431 583 431 595 432 619


[Turing.StdMachines.ShiftRight:MS]
shift the current word to the right inserting a space character '#' at the left.
EOQ;
-
cf:
vf:

t:#{{}}{}
t:#{}#{}
t:#{{}}#{{}
t:##Axolottl


7
1 261 253 s L   
2 453 255 - R   
3 568 255 - υ   
4 681 255 - L   
5 265 398 - R   
6 266 501 - #   
7 270 605 e R:#   

344 253 υ≠#
1 2
283 253 319 253 362 254 429 254

511 255 ε
2 3
477 255 494 255 528 255 545 255

624 255 ε
3 4
590 255 607 255 641 255 659 255

469 171 ε
4 1
680 234 680 218 680 186 680 171 574 171 362 171 256 171 256 186 258 216 259 232

263 321 #
1 5
261 274 262 299 263 342 264 377

265 432 ε
5 6
265 419 265 419 265 434 266 480

268 550 ε
6 7
266 522 267 536 268 564 268 578


[Turing.Nichtdet:MS]
simple non deterministic machine schema.
EOQ;
-
cf:
vf:

t:##Axolottl


3
1 331 390 s 
2 485 248 e 
3 443 523 e 

397 319 ε
1 2
352 370 350 344 436 293 464 267

387 456 ε
1 3
348 411 367 433 406 479 425 502


[Turing.Haenger:MS]
that machine will produce a hang on most inputs
EOQ;
-
cf:
vf:

t:#{{}}{}
t:#{}#{}
t:#{{}}#{{}
t:##Axolottl


2
1 288 286 s 
2 626 286 e L:#  L:#  L:#  L:#  L:#   

409 286 ε
1 2
309 286 359 286 460 286 510 286


[Turing.UndefWr:MS]
write an undefined character and question for an undefined character: test error conditions.
EOQ;
-
cf:
vf:

t:##Axolottl


2
1 476 308 s α  b
2 659 311 e 

574 310 ζ
1 2
515 308 542 309 604 310 638 310


[Turing.ndet]
test for non deterministic turing machines and machine schemas.
EOQ;

[Turing.ndet.ndetTM:TM]
simple non deterministic turing machine writing a 1 as well as a 0 in parallel to the same tape position
EOQ;
-
cf:
vf:

t:##


4
1 460 420 s S0
2 775 421 - S1
3 641 586 - S2
4 940 585 e h

617 420 (#,0)
1 2
484 420 551 420 683 420 750 420

550 503 (#,1)
1 3
478 436 514 469 586 536 622 569

789 585 1,R
3 4
665 585 727 585 850 585 912 585

856 501 0,R
2 4
792 438 824 470 888 533 920 565


[Turing.ndet.ndetMS:MS]
Machine first generates all words with 3 zer/one digits and then filter all non monotonic ascending configurations that is all configurations with '10' as part of the string. View the generated configurations by right clicking on the tape after execution. Use Shift-F9 to run till the end or several times F9 to run until the next output is available.
EOQ;
-
cf:
vf:

t:##


5
1 364 454 s ndetTM^3 L:#
2 558 455 - R
3 680 454 - R
4 903 457 e R N R
5 745 663 e R:# R Y R

490 454 ε
1 2
447 454 469 454 512 454 534 454

556 344 0
2 2
558 434 558 411 515 348 559 344 579 326 558 411 558 434

618 454 1
2 3
582 454 600 454 637 454 656 454

678 344 1
3 3
679 433 679 387 698 320 678 345 641 348 679 387 679 433

758 454 #
3 4
704 454 718 454 787 455 842 456

712 555 0
3 5
686 475 699 515 724 596 736 636

801 580 #
2 4
582 475 604 494 630 539 670 551 749 584 918 601 935 548 944 527 916 494 910 478


[Turing.endlos:TM]
test endless loop conditions: currently the automaton will halt after 100.000 steps.
EOQ;
-
cf:
vf:

t:##Axolottl


1
1 391 423 s S0

404 293 (#,#)
1 1
385 398 379 372 367 319 361 293 381 293 421 293 441 293 430 319 410 373 399 399


